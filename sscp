#!/usr/bin/env bash

# Download this file in Windows GitBash
#  curl -Ls https://raw.github.com/rikby/sscp/master/sscp -o /usr/bin/sscp
# Global vars:
#   SSCP_RC=.sscprc     - Global resource file
#   SSCP_SSH_BIN=ssh    - SSH bin file
#   SSCP_SCP_BIN=scp    - SCP bin file
#   SSCP_EXCLUDE=.idea  - Custom exclude list.
#   SSCP_TEMP=~         - Temp directory for archive. It uses for remote servers.
#   SSCP_CONNECT=.vagrant@127.0.0.1
#                       - Connection host and user.

set -o pipefail
set -o errexit
set -o nounset
#set -o xtrace

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
readonly __dir __file

ERR_FATAL=1
ERR_LOGIC=2
ERR_PARAMS=3
ERR_FILE_SYSTEM=4
ERR_CONNECTION=6 # failed test for connection
VERBOSE_OFF=0
VERBOSE=1
VERBOSE_VERY=2
VERBOSE_DEBUG=3
readonly ERR_FATAL ERR_LOGIC ERR_PARAMS ERR_FILE_SYSTEM \
          VERBOSE VERBOSE_VERY VERBOSE_OFF VERBOSE_DEBUG

SSCP_RC=${SSCP_RC:-.sscprc}
# directory where base .sscprc file
SSCP_BASE_DIR=${SSCP_BASE_DIR:-$(cd; pwd)}
# SSH binary file
SSCP_SSH_BIN=${SSCP_SSH_BIN:-ssh}
# SCP binary file
SSCP_SCP_BIN=${SSCP_SCP_BIN:-scp}
# Default exclude list
SSCP_EXCLUDE=${SSCP_EXCLUDE:-.idea}
# Default connection
SSCP_CONNECT=${SSCP_CONNECT:-vagrant@127.0.0.1}
# Default temp directory. It uses in a remote server as well
SSCP_TEMP=${SSCP_TEMP:-'~'}
# disable using colors
SSCP_NO_COLOR=${SSCP_NO_COLOR:-0}
# verbose level
SSCP_VERBOSE=${SSCP_VERBOSE:-${VERBOSE}}
SSCP_NEW_HOST_RESET_PORT=${SSCP_NEW_HOST_RESET_PORT:-1}
sscp_verbose=${SSCP_VERBOSE}

if [ "${VERBOSE_DEBUG}" -eq "${SSCP_VERBOSE}" ]; then
  # enable traced output
  set -o xtrace
fi

download_url='https://raw.github.com/rikby/sscp/master/download'
connect=${connect:-${SSCP_CONNECT}}

if [ '1' == "${SSCP_NO_COLOR}" ]; then
  t_red=''
  t_green=''
  t_reset=''
else
  t_red='\e[0;31m'
  t_green='\e[0;32m'
  t_reset='\e[0m'
fi
# Green "OK"
t_OK=${t_green}'OK'${t_reset}

show_help () {
    cat << EOF
SSCP Shell Tool v0.6.0
Fast downloader/deployer for remote servers.
It archives files by using tar and transports them using by SCP. So, just pack and transfer.
All commands run by using SSH connection.

Base format:
  $ sscp ACTION SOURCE_PATH TARGET_PATH

ACTIONS

UPLOAD or DOWNLOAD
Upload/download format:
  $ sscp upload|U|download|D SOURCE_PATH TARGET_PATH \\
    [OPTIONS]
      LOCAL_PATH  Local path to directory or file to upload onto a remote server.
      REMOTE_PATH Remote path to directory where packed file/s should be extracted.

TEST
Test connection:
  $ sscp test
  OK

SHOW CONFIG-FILE
Show path to config (if file was found) which is going to be used:
  $ sscp config-file
  /home/my-user/.sscprc

SHOW SSH CONNECTION
Show connection string:
  $ sscp ssh-connection
  OR
  $ sscp show-ssh-connection
  ssh myuser@localhost -p 2222

SHOW ENV VARS
Show external environment SSCP_* variables
  $ sscp show-vars
  OR
  $ sscp vars
  SSCP_RC=.sscprc
  [...]

UPLOAD
Upload file or directory onto remote server. Command:
  SOURCE_PATH Local path to directory or file to upload. Be default archive
              of packed file/s will be placed to the user home directory.
  TARGET_PATH Define remote path for extracting packed remote file/s.
              It won't unpack packed remote file/s if it's not set.

DOWNLOAD
Download file or directory from remote server. Command:
  SOURCE_PATH Remote path to directory or file to download. Be default archive
              of packed file/s will be placed to the user home directory.
  TARGET_PATH Optional.
              Define local path for extracting packed remote file/s.
              It won't unpack packed remote file/s if it's not set.
              If this argument is omitted made archive will be placed into
              a current directory.

OPTIONS FOR DEPLOYMENT
  -p|--port PORT
              Define custom connection port.
              Default: 2222
  -g|--use-vcs
              Include VCS file into transition archives.
              It excludes .idea files and VCS. This option will disable
              excluding VCS files.
  -s|--silent   Disable output.
  -v|--verbose  Set "very" verbose mode.
  -D|--debug  Set "debug" verbose mode.
  -H|--host HOST
              Connection host. It can be passed with a username.
              root@example.com
  -e|--ignore-excluding
              Ignore all default excluding.
  -c|--create-destination
              Create destination path automatically.
  -h|--help   Show this help

CONNECTION PARAMETERS
You may define connection parameters in '.sscprc'.

It will be used from current directory where this command is being executed.
E.i. if you run this command from directory /var/www you may have configuration
file /var/www/.sscprc.

In the same time you can create it in home directory. ~/.sscprc

File in the current directory has higher priority the in home user directory.

Example of .sscprc:
connect='vagrant@127.0.0.1'
port='2222'
ssh_connect="ssh \${connect} -p \${port}"
remote_base_dir='/var/www'
local_base_dir='/d/home'

Anyway, you may declare .ssh/config file.
EOF
}

check_error () {
  if [ $1 != 0 ]; then
    echo -e "${t_red}error:${t_reset} "$2 > /dev/stderr
    exit $1
  fi
}

# put_echo 'My text'
# or
# put_echo ${VERBOSE_VERY} 'My text'
put_echo () {
  if [[ "${1}" =~ ^[0-3]$ ]]; then
    mode=${1}
    shift
  else
    mode=${VERBOSE}
  fi
  if [ "${sscp_verbose}" -ge "${mode}" ]; then
    echo -e ${@}
  fi
  return 0
}
put_printf () {
  if [[ "${1}" =~ ^[0-3]$ ]]; then
    mode=${1}
    shift
  else
    mode=${VERBOSE}
  fi
  local format=${1}
  shift
  if [ "${sscp_verbose}" -ge "${mode}" ]; then
    printf "${format}" ${@}
  fi
  return 0
}

read_params () {
  # Process args

  # Read arguments
  i=0
  while [ -n "${1:-}" ] && [ "${1::1}" != '-' ]; do
    (( i+=1 ))
    if [ 1 == ${i} ]; then
      # Action type: upload or download or U or D
      action_type="${1:-}"
      if [ "${action_type}" == 'U' ]; then
        action_type='upload'
      elif [ "${action_type}" == 'D' ]; then
        action_type='download'
      fi
      shift
    elif [ 2 == ${i} ]; then
      # Argument 2 - SOURCE_PATH
      path1="${1}"
      shift
    elif [ 3 == ${i} ]; then
      # Argument 3 - TARGET_PATH
      path2="${1}"
      shift
    fi
  done

  if [ -z "${1:-}" ]; then
    return
  fi

  # Process options
  # validate and redefine options
  declare -A options
  options=(
    [g]=use-vcs
    [p:]=port:
    [h]=help
    [H:]=host:
    [c]=create-destination
    [s]=silent
    [v]=verbose
    [D]=debug
  )
  OPTS=`getopt -o $(echo ${!options[*]} | tr -d ' ') -l $(echo ${options[*]} | tr ' ' ',') -- "$@"`
  eval set -- "${OPTS}"

  orig_port=${port}
  orig_host=$(echo ${connect} | grep -oE '[^@]+$')

  while true; do
    case "${1}" in
      -g|--use-vcs)
        use_vcs=1
        shift
        ;;
      -e|--ignore-excluding)
        exclude_on=0
        shift
        ;;
      -c|--create-destination)
        create_target_path=1
        shift
        ;;
      -s|--silent)
        sscp_verbose=${VERBOSE_OFF}
        shift
        ;;
      -v|--verbose)
        sscp_verbose=${VERBOSE_VERY}
        shift
        ;;
      -D|--debug)
        sscp_verbose=${VERBOSE_DEBUG}
        sscp_verbose=3
        shift
        ;;
      -p|--port)
        port="$2"
        shift 2
        ;;
      -H|--host)
        connect="$2"
        shift 2
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      -\?)
        show_help
        exit 1
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "${0}: unparseable option ${1}."
        exit ${ERR_PARAMS}
        ;;
    esac
  done

  # drop default port if hostname has been changed
  if [ '1' == "${SSCP_NEW_HOST_RESET_PORT}" ] \
    && [ "${orig_port}" == "${port}" ] \
    && [ "${orig_host}" != "$(echo ${connect} | grep -oE '[^@]+$')" ]
  then
    port=''
  fi

  rest_options=$@
}

define_exclude_options() {
  local exclude=''
  local source_path=${1}
  if [ 1 == ${exclude_on} ]; then
    exclude='--exclude='${SSCP_EXCLUDE}
    if [ 0 == ${use_vcs} ] && [[ ! "${source_path}" =~ \.git[^/]*$ ]]; then
      exclude+=' --exclude-vcs'
    fi
  fi
  echo ${exclude}
}

load_config () {
  # Default values
  rest_options=''
  action_type=''
  path1=''
  path2=''
  port=''

  use_vcs=0
  exclude_on=1
  create_target_path=0

  ssh_connect=''
  scp_connect=''
  remote_base_dir=''
  local_base_dir=''
  # EOB Default values

  config_filename=${SSCP_RC}
  config_file=''
  if [ -f ${PWD}/${config_filename} ]; then
    config_file="${PWD}/${config_filename}"
  elif [ -f ${SSCP_BASE_DIR}/${config_filename} ]; then
    config_file=${SSCP_BASE_DIR}"/${config_filename}"
  fi

  if [ -n "${config_file}" ]; then
    . "${config_file}"
  fi
}

# Init connection configuration
init_connection() {
  if [ -z "${ssh_connect}" ]; then
    ssh_connect="${SSCP_SSH_BIN} ${connect}"
    if [ -n "${port:-}" ]; then
        ssh_connect+=" -p ${port}"
    fi
  fi

  if [ -z "${scp_connect}" ]; then
    scp_connect=${SSCP_SCP_BIN}
    if [ -n "${port:-}" ]; then
      scp_connect+=" -P ${port}"
    fi
  fi
}

test_connection() {
  ${ssh_connect} -C 'cd > /dev/null' && put_echo 'OK' || check_error ${ERR_CONNECTION} "Cannot connect to the server (${connect} ${port})."
}

deploy_target() {
  test_connection > /dev/null

  # validate params
  if [ -z "${path1:-}" ]; then
    check_error ${ERR_PARAMS} 'Empty TARGET_PATH argument.'
  fi
  if [ -z "${path2:-}" ]; then
    check_error ${ERR_PARAMS} 'Empty SOURCE_PATH argument.'
  fi

  if [ "${path2::1}" == '/' ]; then
    # absolute remote path
    target_dir=${path2}
  elif [ -n "${remote_base_dir}" ]; then
    # relative remote path
    target_dir=${remote_base_dir}
    if [ '.' != "${path2}" ]; then
      target_dir+="/${path2}"
    fi
  else
    # relative remote path
    target_dir=${path2}
  fi

  if [ 0 == ${create_target_path} ] && [ 0 == $(${ssh_connect} "ls -la ${target_dir} > /dev/null 2>&1 && echo 1 || echo 0") ]; then
    check_error ${ERR_FILE_SYSTEM} "Remote target directory ${target_dir} does not exist."
  fi

  if [ 1 == ${create_target_path} ] && [ 0 == $(${ssh_connect} "mkdir ${target_dir} -p > /dev/null 2>&1 && echo 1 || echo 0") ]; then
    check_error ${ERR_FILE_SYSTEM} "Could not create remote target directory '${target_dir}'."
  fi

  if [ -f ${path1} ]; then
    upload_type='f'
    source_path=${path1}
    source_dir=$(dirname ${path1})
  elif [ -d ${path1} ]; then
    upload_type='d'
    source_path=${path1}
    source_dir=${path1}
  elif [ -n  "${local_base_dir}" ] && [ -f ${local_base_dir}/${path1} ]; then
    upload_type='f'
    source_path=${local_base_dir}/${path1}
    source_dir=$(dirname ${local_base_dir}/${path1})
  elif [ -n  "${local_base_dir}" ] && [ -d ${local_base_dir}/${path1} ]; then
    upload_type='d'
    source_path=${local_base_dir}/${path1}
    source_dir=${local_base_dir}/${path1}
  else
    check_error ${ERR_FILE_SYSTEM} "error: Could not find source '${path1}'"
  fi

  put_printf "local:${t_green}${source_path}${t_reset} => remote:${t_green}${target_dir}${t_reset}\n"
  if [ ${upload_type} = 'd' ] || [[ ! ${source_path} =~ .*\.tar\.gz$ ]]; then
    put_printf "Packing file/s..."
    rm -f $(basename ${source_path}).tar.gz
    if [ ${upload_type} = 'd' ]; then
      tar czf $(basename ${source_path}).tar.gz -C ${source_dir} . ${exclude} ${rest_options}
    else
      tar czf $(basename ${source_path}).tar.gz -C ${source_dir} $(basename ${source_path}) ${exclude} ${rest_options}
    fi
    put_echo "${t_OK}"

    source_archive=$(basename ${source_path}).tar.gz
  else
    source_archive=$(basename ${source_path})
  fi

  put_printf "Uploading archive..."
  ${scp_connect} ${source_archive} ${connect}:${target_dir} && rm -f ${source_archive}
  check_error $? 'Cannot upload archive.'
  put_echo "Uploading archive...${t_OK}"

  put_printf "Unpacking archive..."
  ${ssh_connect} "cd ${target_dir} && tar xzfm ${source_archive} && rm -f ${source_archive}"
  check_error $? 'Cannot unpack archive.'
  put_echo "${t_OK}"
}

download_target() {
  # add defined base directories
  if [ "${path1::1}" == '/' ] ||  [ -z "${remote_base_dir}" ]; then
    # absolute remote path
    source_dir=${path1}
  else
    # relative remote path
    source_dir=${remote_base_dir}/${path1}
  fi
  if [ "${path2::1}" == '/' ] || [ -z "${local_base_dir}" ]; then
    # absolute remote path
    target_dir=${path2}
  elif [ -n "${path2}" ]; then
    # relative remote path
    target_dir=${local_base_dir}
    if [ '.' != "${path2}" ]; then
      target_dir+="/${path2}"
    fi
  fi

  if ${ssh_connect} "test -d ${source_dir}"; then
    target_type='d'
  elif ${ssh_connect} "test -f ${source_dir}"; then
    target_type='f'
  else
    check_error ${ERR_FILE_SYSTEM} "Path '${source_dir}' does not exist."
  fi

  if [ ${target_type} == 'f' ]; then
    target_basename=$(basename "${source_dir}")
    target_to_archive=''
    download_file=${source_dir}
    if [[ ! "${target_basename}" =~ \.(tar|gz)$ ]]; then
      # ignore packing archives
      target_to_archive=$(basename "${source_dir}")
    fi
    source_dir=$(dirname "${source_dir}")
  else
    target_basename=$( basename "${source_dir}" )
    target_to_archive='.'
  fi

  # validate params
  ${ssh_connect} "ls -la ${source_dir} > /dev/null 2>&1"
  check_error $? "Path '${source_dir}' does not exist."
  if [ -n "${target_dir}" ] && [ ! -d "${target_dir}" ]; then
    check_error ${ERR_FILE_SYSTEM} "No such directory '${target_dir}'."
  fi

  put_printf "local:${t_green}${target_dir:-./${target_basename}.tar.gz}${t_reset} <= remote:${t_green}${source_dir}/${target_to_archive}${t_reset}\n"
  if [ -n "${target_to_archive}" ]; then
    put_printf "Packing file/s..."
    download_file="${SSCP_TEMP}/${target_basename}.tar.gz"
    ${ssh_connect} "rm -f ${download_file}" # clean up
    ${ssh_connect} "tar cf ${download_file} -C ${source_dir} ${target_to_archive} ${exclude} ${rest_options}"
    put_echo "${t_OK}"
  fi

  put_printf 'Downloading archive...'
  ${scp_connect} ${connect}:${download_file} ./
  check_error $? 'Unable to download archive.'
  if [ -n "${target_to_archive}" ]; then
    ${ssh_connect} "rm -rf ${SSCP_TEMP}/${target_basename}.tar.gz"
  fi
  put_echo "${t_OK}"

  if [ -n "${target_dir}" ]; then
    put_printf "Unpacking archive..."
    tar xf ./${target_basename}.tar.gz -C ${target_dir}
    put_echo "${t_OK}"
    rm -f ./${target_basename}.tar.gz
  else
    echo 'Archive of target file/s: './${target_basename}.tar.gz
  fi
}

self_update () {
  if [ -e ${__file} ] && [ ! -w ${__file} ]; then
      echo 'error: No permissions to perform update.'
      exit 1
  fi

  put_echo ${VERBOSE_VERY} "Downloading by ${download_url}..."
  put_echo ${VERBOSE_DEBUG} "cmd: curl -Ls ${download_url} | bash -s -- --file ${__file} $@"

  if ! curl -Ls ${download_url} | bash -s -- --file ${__file} $@ > /dev/null 2>&1; then
    echo 'error: Cannot complete update.'
    exit 1
  fi

  # show version
  ${__file} --help | head -1 | grep -oE '[v].*'
  echo 'Update completed.'
}

process_deployment() {
  # Load configuration from .sscprc file.
  load_config

  # Init passed params
  read_params $@

  if [ -z "${action_type}" ]; then
    show_help
    check_error ${ERR_PARAMS} 'Empty action type.'
    return
  fi

  current_pwd=${PWD}

  init_connection

  if [ "${action_type}" == 'test' ]; then
    test_connection
    return
  elif [ "${action_type}" == 'config-file' ]; then
    echo ${config_file}
    return
  elif [[ "${action_type}" =~ ^(show-)?ssh-connection$ ]]; then
    echo ${ssh_connect}
    return
  elif [[ "${action_type}" =~ self-?update ]]; then
    self_update ${rest_options}
    exit 0
  elif [[ "${action_type}" =~ ^(show-)?vars$ ]]; then
    cat << EOF
# default name of config file
SSCP_RC=${SSCP_RC}
# directory where base .sscprc file
SSCP_BASE_DIR=${SSCP_BASE_DIR}
# SSH binary file
SSCP_SSH_BIN=${SSCP_SSH_BIN}
# SCP binary file
SSCP_SCP_BIN=${SSCP_SCP_BIN}
# Default exclude list
SSCP_EXCLUDE=${SSCP_EXCLUDE}
# Default connection
SSCP_CONNECT=${SSCP_CONNECT}
# Default temp directory. It uses in a remote server as well
SSCP_TEMP=${SSCP_TEMP}
# disable using colors
SSCP_NO_COLOR=${SSCP_NO_COLOR}
# default verbose level (0- silent, 1- normal, 2- "very" mode, 3- debug)
SSCP_VERBOSE=${SSCP_VERBOSE}
# if default host has been changed drop port as well
SSCP_NEW_HOST_RESET_PORT=${SSCP_NEW_HOST_RESET_PORT}
EOF
    return
  fi

  exclude=$(define_exclude_options ${path1})

  if [ "${action_type}" == 'upload' ]; then
    deploy_target
  elif [ "${action_type}" == 'download' ]; then
    download_target
  else
    check_error ${ERR_PARAMS} "Invalid action."
  fi
}

process_deployment $@
